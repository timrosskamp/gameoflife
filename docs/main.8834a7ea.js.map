{"version":3,"sources":["components/CanvasResizer.ts","components/Dagging.ts","components/Universe.ts","components/GameOfLife.ts","utils/domReady.ts","main.ts"],"names":[],"mappings":"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","file":"main.8834a7ea.js","sourceRoot":"..\\src","sourcesContent":["export class CanvasResizer {\r\n    canvas: HTMLCanvasElement\r\n\r\n    width: number\r\n    height: number\r\n\r\n    private listeners: Function[] = []\r\n\r\n    constructor(canvas: HTMLCanvasElement){\r\n        this.canvas = canvas\r\n\r\n        this.update()\r\n\r\n        window.addEventListener('resize', () => {\r\n            this.update()\r\n            this.emit()\r\n        }, {\r\n            passive: true\r\n        })\r\n    }\r\n\r\n    update(){\r\n        this.width = this.canvas.clientWidth\r\n        this.height = this.canvas.clientHeight\r\n\r\n        this.canvas.width = this.width\r\n        this.canvas.height = this.height\r\n    }\r\n\r\n    on(fn: Function){\r\n        this.listeners.push(fn)\r\n    }\r\n\r\n    private emit(){\r\n        this.listeners.forEach(fn => fn())\r\n    }\r\n}","export class Dragging {\r\n\r\n    private listeners: Function[] = []\r\n\r\n    private isDragging = false\r\n\r\n    constructor(target: Element){\r\n        target.addEventListener('mousedown', e => {\r\n            this.isDragging = true\r\n\r\n            this.emit(e)\r\n        })\r\n\r\n        window.addEventListener('mouseup', e => {\r\n            this.isDragging = false\r\n        })\r\n\r\n        target.addEventListener('mousemove', e => {\r\n            if( this.isDragging ){\r\n                this.emit(e)\r\n            }\r\n        })\r\n    }\r\n\r\n    private emit(e: Event){\r\n        this.listeners.forEach(fn => fn(e))\r\n    }\r\n\r\n    on(fn: Function){\r\n        this.listeners.push(fn)\r\n    }\r\n\r\n}","interface Point {\r\n    x: number\r\n    y: number\r\n}\r\n\r\ninterface Delta {\r\n    x: number\r\n    y: number\r\n    state: boolean\r\n}\r\n\r\nexport class Universe {\r\n\r\n    private rows: number\r\n    private cols: number\r\n    private matrix: Array<Array<boolean>>\r\n\r\n    constructor(rows: number, cols: number){\r\n        this.rows = rows\r\n        this.cols = cols\r\n\r\n        this.clear()\r\n    }\r\n\r\n    getLivingCells(){\r\n        const cells: Point[] = []\r\n\r\n        for( let row = 0; row < this.rows; row++ ){\r\n            for( let col = 0; col < this.cols; col++ ){\r\n                if( this.matrix[row][col] == true ){\r\n                    cells.push({ x: col, y: row })\r\n                }\r\n            }\r\n        }\r\n\r\n        return cells\r\n    }\r\n\r\n    enliveCell(point: Point){\r\n        this.matrix[point.y][point.x] = true\r\n    }\r\n\r\n    iterate(){\r\n        const delta: Delta[] = []\r\n\r\n        for( let row = 0; row < this.rows; row++ ){\r\n            for( let col = 0; col < this.cols; col++ ){\r\n                const state = this.matrix[row][col]\r\n                const neighbors = this.neighbors({ x: col, y: row })\r\n\r\n                if( state == true && neighbors != 2 && neighbors != 3 ){\r\n                    delta.push({ x: col, y: row, state: false })\r\n                }else if( state == false && neighbors == 3 ){\r\n                    delta.push({ x: col, y: row, state: true })\r\n                }\r\n            }\r\n        }\r\n\r\n        for( const { x, y, state } of delta ){\r\n            this.matrix[y][x] = state\r\n        }\r\n    }\r\n\r\n    clear() {\r\n        this.matrix = []\r\n\r\n        for( let row = 0; row < this.rows; row++ ){\r\n            this.matrix[row] = []\r\n\r\n            for( let col = 0; col < this.cols; col++ ){\r\n                this.matrix[row][col] = false\r\n            }\r\n        }\r\n    }\r\n\r\n    resize(rows: number, cols: number){\r\n        if( rows !== this.rows ){\r\n            if( rows > this.rows ){\r\n                for( let row = this.rows; row < rows; row++ ){\r\n                    this.matrix[row] = [];\r\n\r\n                    for( let col = 0; col < this.cols; col++ ){\r\n                        this.matrix[row][col] = false\r\n                    }\r\n                }\r\n            }else{\r\n                this.matrix = this.matrix.slice(0, rows)\r\n            }\r\n\r\n            this.rows = rows\r\n        }\r\n\r\n        if( cols !== this.cols ){\r\n            if( cols > this.cols ){\r\n                for( let row = 0; row < this.rows; row++ ){\r\n                    for( let col = this.cols; col < cols; col++ ){\r\n                        this.matrix[row][col] = false\r\n                    }\r\n                }\r\n            }else{\r\n                for( let row = 0; row < this.rows; row++ ){\r\n                    this.matrix[row] = this.matrix[row].slice(0, cols)\r\n                }\r\n            }\r\n\r\n            this.cols = cols\r\n        }\r\n\r\n    }\r\n\r\n    private neighbors(point: Point){\r\n        let cells = 0\r\n\r\n        for( let x = -1; x <= 1; x++ ){\r\n            for( let y = -1; y <= 1; y++ ){\r\n                if( x == 0 && y == 0 )\r\n                    continue\r\n\r\n                if( this.matrix[this.torus(point.y + y, this.rows)][this.torus(point.x + x, this.cols)] )\r\n                    cells++\r\n            }\r\n        }\r\n\r\n        return cells\r\n    }\r\n\r\n    private torus(i: number, limit: number){\r\n        return (i + limit) % limit\r\n    }\r\n\r\n}","import { CanvasResizer } from './CanvasResizer'\r\nimport { Dragging } from './Dagging'\r\nimport { Universe } from './Universe'\r\n\r\nexport class GameOfLife {\r\n\r\n    canvas: HTMLCanvasElement\r\n    ctx: CanvasRenderingContext2D\r\n    universe: Universe\r\n    paused = true\r\n    lastIteration = Date.now()\r\n\r\n    cellsize = 20\r\n\r\n    constructor(canvas: HTMLCanvasElement){\r\n        this.canvas = canvas\r\n        this.ctx = canvas.getContext('2d')\r\n\r\n        const resizer = new CanvasResizer(canvas)\r\n\r\n        this.universe = new Universe(\r\n            Math.ceil(resizer.height / this.cellsize),\r\n            Math.ceil(resizer.width / this.cellsize)\r\n        )\r\n\r\n        resizer.on(() => {\r\n            this.universe.resize(\r\n                Math.ceil(resizer.height / this.cellsize),\r\n                Math.ceil(resizer.width / this.cellsize)\r\n            )\r\n        })\r\n\r\n        const dragging = new Dragging(this.canvas)\r\n\r\n        dragging.on((e: MouseEvent) => {\r\n            const x = Math.ceil((e.offsetX - this.cellsize) / this.cellsize)\r\n            const y = Math.ceil((e.offsetY - this.cellsize) / this.cellsize)\r\n\r\n            if( x < 0 || y < 0 ){\r\n                return;\r\n            }\r\n\r\n            this.universe.enliveCell({ x, y })\r\n        })\r\n\r\n        requestAnimationFrame(() => this.draw())\r\n    }\r\n\r\n    play(){\r\n        this.paused = false\r\n    }\r\n\r\n    pause(){\r\n        this.paused = true\r\n    }\r\n\r\n    iterate(){\r\n        if( (Date.now() - this.lastIteration) > 200 ){\r\n            this.universe.iterate()\r\n\r\n            this.lastIteration = Date.now()\r\n        }\r\n    }\r\n\r\n    clear(){\r\n        this.universe.clear()\r\n    }\r\n\r\n    draw(){\r\n        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height)\r\n\r\n        this.ctx.fillStyle = '#E12D39'\r\n\r\n        this.universe.getLivingCells().forEach(point => {\r\n            this.ctx.fillRect(\r\n                point.x * this.cellsize + 2,\r\n                point.y * this.cellsize + 2,\r\n                this.cellsize - 4,\r\n                this.cellsize - 4\r\n            )\r\n        })\r\n\r\n        if( !this.paused ){\r\n            this.iterate()\r\n        }\r\n\r\n        requestAnimationFrame(() => this.draw())\r\n    }\r\n\r\n}","/**\r\n * @param {Function} cb \r\n */\r\nexport const domReady = (cb) => {\r\n    if( document.readyState === 'complete' || document.readyState === 'interactive' ){\r\n        cb()\r\n    }else{\r\n        document.addEventListener('DOMContentLoaded', () => cb())\r\n    }\r\n}\r\n","import { GameOfLife } from './components/GameOfLife'\r\nimport { domReady } from './utils/domReady'\r\n\r\ndomReady(() => {\r\n    const canvas = document.getElementById('gameoflife') as HTMLCanvasElement\r\n    const play = document.getElementById('play')\r\n    const iterate = document.getElementById('iterate')\r\n    const clear = document.getElementById('clear')\r\n\r\n    const game = new GameOfLife(canvas)\r\n\r\n    play.addEventListener('click', () => {\r\n        if( game.paused ){\r\n            play.classList.add('active')\r\n            game.play()\r\n        }else{\r\n            play.classList.remove('active')\r\n            game.pause()\r\n        }\r\n    })\r\n\r\n    iterate.addEventListener('click', () => game.iterate())\r\n\r\n    clear.addEventListener('click', () => game.clear())\r\n})"]}