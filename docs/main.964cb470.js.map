{"version":3,"sources":["components/CanvasResizer.ts","components/Dagging.ts","components/Universe.ts","components/GameOfLife.ts","utils/domReady.ts","main.ts"],"names":[],"mappings":"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","file":"main.964cb470.js","sourceRoot":"../src","sourcesContent":["export class CanvasResizer {\n    canvas: HTMLCanvasElement\n\n    width: number\n    height: number\n\n    private listeners: Function[] = []\n\n    constructor(canvas: HTMLCanvasElement){\n        this.canvas = canvas\n\n        this.update()\n\n        window.addEventListener('resize', () => {\n            this.update()\n            this.emit()\n        }, {\n            passive: true\n        })\n    }\n\n    update(){\n        this.width = this.canvas.clientWidth\n        this.height = this.canvas.clientHeight\n\n        this.canvas.width = this.width\n        this.canvas.height = this.height\n    }\n\n    on(fn: Function){\n        this.listeners.push(fn)\n    }\n\n    private emit(){\n        this.listeners.forEach(fn => fn())\n    }\n}","export class Dragging {\n\n    private listeners: Function[] = []\n\n    private isDragging = false\n\n    constructor(target: Element){\n        target.addEventListener('mousedown', e => {\n            this.isDragging = true\n\n            this.emit(e)\n        })\n\n        window.addEventListener('mouseup', e => {\n            this.isDragging = false\n        })\n\n        target.addEventListener('mousemove', e => {\n            if( this.isDragging ){\n                this.emit(e)\n            }\n        })\n\n        target.addEventListener('contextmenu', e => {\n            e.preventDefault()\n        })\n    }\n\n    private emit(e: Event){\n        this.listeners.forEach(fn => fn(e))\n    }\n\n    on(fn: Function){\n        this.listeners.push(fn)\n    }\n\n}","interface Point {\n    x: number\n    y: number\n}\n\ninterface Delta {\n    x: number\n    y: number\n    state: boolean\n}\n\nexport class Universe {\n\n    private rows: number\n    private cols: number\n    private matrix: Array<Array<boolean>>\n\n    constructor(rows: number, cols: number){\n        this.rows = rows\n        this.cols = cols\n\n        this.clear()\n    }\n\n    getLivingCells(){\n        const cells: Point[] = []\n\n        for( let row = 0; row < this.rows; row++ ){\n            for( let col = 0; col < this.cols; col++ ){\n                if( this.matrix[row][col] == true ){\n                    cells.push({ x: col, y: row })\n                }\n            }\n        }\n\n        return cells\n    }\n\n    enliveCell(point: Point){\n        this.matrix[point.y][point.x] = true\n    }\n\n    unliveCell(point: Point){\n        this.matrix[point.y][point.x] = false\n    }\n\n    iterate(){\n        const delta: Delta[] = []\n\n        for( let row = 0; row < this.rows; row++ ){\n            for( let col = 0; col < this.cols; col++ ){\n                const state = this.matrix[row][col]\n                const neighbors = this.neighbors({ x: col, y: row })\n\n                if( state == true && neighbors != 2 && neighbors != 3 ){\n                    delta.push({ x: col, y: row, state: false })\n                }else if( state == false && neighbors == 3 ){\n                    delta.push({ x: col, y: row, state: true })\n                }\n            }\n        }\n\n        for( const { x, y, state } of delta ){\n            this.matrix[y][x] = state\n        }\n    }\n\n    clear() {\n        this.matrix = []\n\n        for( let row = 0; row < this.rows; row++ ){\n            this.matrix[row] = []\n\n            for( let col = 0; col < this.cols; col++ ){\n                this.matrix[row][col] = false\n            }\n        }\n    }\n\n    resize(rows: number, cols: number){\n        if( rows !== this.rows ){\n            if( rows > this.rows ){\n                for( let row = this.rows; row < rows; row++ ){\n                    this.matrix[row] = [];\n\n                    for( let col = 0; col < this.cols; col++ ){\n                        this.matrix[row][col] = false\n                    }\n                }\n            }else{\n                this.matrix = this.matrix.slice(0, rows)\n            }\n\n            this.rows = rows\n        }\n\n        if( cols !== this.cols ){\n            if( cols > this.cols ){\n                for( let row = 0; row < this.rows; row++ ){\n                    for( let col = this.cols; col < cols; col++ ){\n                        this.matrix[row][col] = false\n                    }\n                }\n            }else{\n                for( let row = 0; row < this.rows; row++ ){\n                    this.matrix[row] = this.matrix[row].slice(0, cols)\n                }\n            }\n\n            this.cols = cols\n        }\n\n    }\n\n    private neighbors(point: Point){\n        let cells = 0\n\n        for( let x = -1; x <= 1; x++ ){\n            for( let y = -1; y <= 1; y++ ){\n                if( x == 0 && y == 0 )\n                    continue\n\n                if( this.matrix[this.torus(point.y + y, this.rows)][this.torus(point.x + x, this.cols)] )\n                    cells++\n            }\n        }\n\n        return cells\n    }\n\n    private torus(i: number, limit: number){\n        return (i + limit) % limit\n    }\n\n}","import { CanvasResizer } from './CanvasResizer'\nimport { Dragging } from './Dagging'\nimport { Universe } from './Universe'\n\nexport class GameOfLife {\n\n    canvas: HTMLCanvasElement\n    ctx: CanvasRenderingContext2D\n    universe: Universe\n    resizer: CanvasResizer\n    paused = true\n    lastIteration = Date.now()\n\n    cellsize = 20\n    offsetX: number\n    offsetY: number\n\n    constructor(canvas: HTMLCanvasElement){\n        this.canvas = canvas\n        this.ctx = canvas.getContext('2d')\n\n        this.resizer = new CanvasResizer(canvas)\n\n        this.universe = new Universe(\n            Math.ceil(this.resizer.height / this.cellsize),\n            Math.ceil(this.resizer.width / this.cellsize)\n        )\n\n        this.calcOffset()\n\n        this.resizer.on(() => {\n            this.universe.resize(\n                Math.ceil(this.resizer.height / this.cellsize),\n                Math.ceil(this.resizer.width / this.cellsize)\n            )\n\n            this.calcOffset()\n        })\n\n        const dragging = new Dragging(this.canvas)\n\n        dragging.on((e: MouseEvent) => {\n            const x = Math.ceil((e.offsetX - this.cellsize + this.offsetX) / this.cellsize)\n            const y = Math.ceil((e.offsetY - this.cellsize + this.offsetY) / this.cellsize)\n\n            if( x < 0 || y < 0 ){\n                return;\n            }\n\n            if( e.buttons == 2 ){\n                this.universe.unliveCell({ x, y })\n            }else{\n                this.universe.enliveCell({ x, y })\n            }\n        })\n\n        requestAnimationFrame(() => this.draw())\n    }\n\n    play(){\n        this.paused = false\n    }\n\n    pause(){\n        this.paused = true\n    }\n\n    iterate(){\n        if( (Date.now() - this.lastIteration) > 200 ){\n            this.universe.iterate()\n\n            this.lastIteration = Date.now()\n        }\n    }\n\n    clear(){\n        this.universe.clear()\n    }\n\n    calcOffset(){\n        this.offsetY = Math.round((this.cellsize - (this.resizer.height % this.cellsize)) / 2) - 1\n        this.offsetX = Math.round((this.cellsize - (this.resizer.width % this.cellsize)) / 2) - 1\n    }\n\n    draw(){\n        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height)\n\n        this.ctx.fillStyle = '#E12D39'\n\n        this.universe.getLivingCells().forEach(point => {\n            this.ctx.fillRect(\n                point.x * this.cellsize + 2 - this.offsetX,\n                point.y * this.cellsize + 2 - this.offsetY,\n                this.cellsize - 4,\n                this.cellsize - 4\n            )\n        })\n\n        if( !this.paused ){\n            this.iterate()\n        }\n\n        requestAnimationFrame(() => this.draw())\n    }\n\n}","/**\n * @param {Function} cb \n */\nexport const domReady = (cb) => {\n    if( document.readyState === 'complete' || document.readyState === 'interactive' ){\n        cb()\n    }else{\n        document.addEventListener('DOMContentLoaded', () => cb())\n    }\n}\n","import { GameOfLife } from './components/GameOfLife'\nimport { domReady } from './utils/domReady'\n\ndomReady(() => {\n    const canvas = document.getElementById('gameoflife') as HTMLCanvasElement\n    const play = document.getElementById('play')\n    const iterate = document.getElementById('iterate')\n    const clear = document.getElementById('clear')\n\n    const game = new GameOfLife(canvas)\n\n    play.addEventListener('click', () => {\n        if( game.paused ){\n            play.classList.add('active')\n            game.play()\n        }else{\n            play.classList.remove('active')\n            game.pause()\n        }\n    })\n\n    iterate.addEventListener('click', () => game.iterate())\n\n    clear.addEventListener('click', () => game.clear())\n})"]}